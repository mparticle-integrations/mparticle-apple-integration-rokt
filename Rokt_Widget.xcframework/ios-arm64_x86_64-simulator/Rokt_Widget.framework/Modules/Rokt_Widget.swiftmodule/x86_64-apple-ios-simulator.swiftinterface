// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name rokt_widget -module-name Rokt_Widget
import AppTrackingTransparency
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class RoktEmbeddedUIView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension Rokt_Widget.RoktEmbeddedUIView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
}
extension Rokt_Widget.RoktEmbeddedUIView : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func safariViewController(_ controller: SafariServices.SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Swift.Bool)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RoktViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func closeModal()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func done(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Rokt_Widget.RoktViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
}
extension Rokt_Widget.RoktViewController : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func safariViewController(_ controller: SafariServices.SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Rokt : ObjectiveC.NSObject {
  @objc public static func setFrameworkType(frameworkType: Rokt_Widget.RoktFrameworkType)
  @objc public static func initWith(roktTagId: Swift.String)
  @objc public static func initWith(roktTagId: Swift.String, onInitComplete: @escaping ((Swift.Bool) -> Swift.Void))
  @objc public static func execute(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, onLoad: (() -> Swift.Void)? = nil, onUnLoad: (() -> Swift.Void)? = nil, onShouldShowLoadingIndicator: (() -> Swift.Void)? = nil, onShouldHideLoadingIndicator: (() -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc public static func execute(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, config: Rokt_Widget.RoktConfig? = nil, onLoad: (() -> Swift.Void)? = nil, onUnLoad: (() -> Swift.Void)? = nil, onShouldShowLoadingIndicator: (() -> Swift.Void)? = nil, onShouldHideLoadingIndicator: (() -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc public static func execute2step(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, onLoad: (() -> Swift.Void)? = nil, onUnLoad: (() -> Swift.Void)? = nil, onShouldShowLoadingIndicator: (() -> Swift.Void)? = nil, onShouldHideLoadingIndicator: (() -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil, onEvent: ((Rokt_Widget.RoktEventType, Rokt_Widget.RoktEventHandler) -> Swift.Void)? = nil)
  @objc public static func execute2step(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, config: Rokt_Widget.RoktConfig? = nil, onLoad: (() -> Swift.Void)? = nil, onUnLoad: (() -> Swift.Void)? = nil, onShouldShowLoadingIndicator: (() -> Swift.Void)? = nil, onShouldHideLoadingIndicator: (() -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil, onEvent: ((Rokt_Widget.RoktEventType, Rokt_Widget.RoktEventHandler) -> Swift.Void)? = nil)
  @objc public static func executeWithEvents(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, onEvent: ((Rokt_Widget.RoktEvent) -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc public static func executeWithEvents(viewName: Swift.String? = nil, attributes: [Swift.String : Swift.String], placements: [Swift.String : Rokt_Widget.RoktEmbeddedView]? = nil, config: Rokt_Widget.RoktConfig? = nil, onEvent: ((Rokt_Widget.RoktEvent) -> Swift.Void)? = nil, onEmbeddedSizeChange: ((Swift.String, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc public static func close()
  @objc public static func setLoggingEnabled(enable: Swift.Bool)
  @objc public static func setEnvironment(environment: Rokt_Widget.RoktEnvironment)
  @objc public static func events(viewName: Swift.String, onEvent: ((Rokt_Widget.RoktEvent) -> Swift.Void)?)
  @objc public static func globalEvents(onEvent: @escaping ((Rokt_Widget.RoktEvent) -> Swift.Void))
  @objc public static func updateAttribute(key: Swift.String, value: Swift.String)
  @objc public static func setAttributes(_ attributes: [Swift.String : Swift.String])
  @objc deinit
}
@available(iOS 13.0, *)
extension Swift.String {
  public func sha256() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class RoktEvent : ObjectiveC.NSObject {
  @_hasMissingDesignatedInitializers @objc public class InitComplete : Rokt_Widget.RoktEvent {
    @objc final public let success: Swift.Bool
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class ShowLoadingIndicator : Rokt_Widget.RoktEvent {
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class HideLoadingIndicator : Rokt_Widget.RoktEvent {
    @objc override dynamic public init()
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PlacementInteractive : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PlacementReady : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class OfferEngagement : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PositiveEngagement : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PlacementClosed : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PlacementCompleted : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class PlacementFailure : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class FirstPositiveEngagement : Rokt_Widget.RoktEvent {
    @objc final public let placementId: Swift.String?
    @objc public func setFulfillmentAttributes(attributes: [Swift.String : Swift.String])
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoktEventHandler : Rokt_Widget.RoktEvent {
  @objc public func setFulfillmentAttributes(attributes: [Swift.String : Swift.String])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoktConfig : ObjectiveC.NSObject {
  @objc public enum ColorMode : Swift.Int {
    case light
    case dark
    case system
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class CacheConfig : ObjectiveC.NSObject {
    @objc public static let maxCacheDuration: Foundation.TimeInterval
    @objc public init(cacheDuration: Foundation.TimeInterval = maxCacheDuration, cacheAttributes: [Swift.String : Swift.String]? = nil)
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class Builder : ObjectiveC.NSObject {
    @objc public func colorMode(_ colorMode: Rokt_Widget.RoktConfig.ColorMode) -> Rokt_Widget.RoktConfig.Builder
    @objc public func cacheConfig(_ cacheConfig: Rokt_Widget.RoktConfig.CacheConfig) -> Rokt_Widget.RoktConfig.Builder
    @objc public func build() -> Rokt_Widget.RoktConfig
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@objc public enum RoktEnvironment : Swift.Int {
  case Prod
  case ProdDemo
  case Stage
  case Local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RoktEventType : Swift.Int {
  case FirstPositiveEngagement
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RoktFrameworkType : Swift.Int {
  case iOS
  case Cordova
  case ReactNative
  case Flutter
  case Maui
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class RoktEmbeddedView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func updateEmbeddedSize(_ size: CoreFoundation.CGFloat)
  @objc deinit
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public var parentViewControllers: UIKit.UIViewController? {
    get
  }
}
@available(iOS 15.0, *)
extension Rokt_Widget.RoktEmbeddedView {
  @_Concurrency.MainActor(unsafe) public func load<Content>(onSizeChanged: @escaping ((CoreFoundation.CGFloat) -> Swift.Void), injectedView: @escaping () -> Content) where Content : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public func closeEmbedded()
}
@available(iOS 15, *)
@_Concurrency.MainActor(unsafe) public struct RoktLayout : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(sdkTriggered: SwiftUI.Binding<Swift.Bool>, viewName: Swift.String? = nil, locationName: Swift.String = "", attributes: [Swift.String : Swift.String], config: Rokt_Widget.RoktConfig? = nil, onLoad: (() -> Swift.Void)? = nil, onUnLoad: (() -> Swift.Void)? = nil, onShouldShowLoadingIndicator: (() -> Swift.Void)? = nil, onShouldHideLoadingIndicator: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public init(sdkTriggered: SwiftUI.Binding<Swift.Bool>, viewName: Swift.String? = nil, locationName: Swift.String = "", attributes: [Swift.String : Swift.String], config: Rokt_Widget.RoktConfig? = nil, onEvent: ((Rokt_Widget.RoktEvent) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11Rokt_Widget0A6LayoutV4bodyQrvp", 0) __
}
extension Rokt_Widget.RoktConfig.ColorMode : Swift.Equatable {}
extension Rokt_Widget.RoktConfig.ColorMode : Swift.Hashable {}
extension Rokt_Widget.RoktConfig.ColorMode : Swift.RawRepresentable {}
extension Rokt_Widget.RoktEnvironment : Swift.Equatable {}
extension Rokt_Widget.RoktEnvironment : Swift.Hashable {}
extension Rokt_Widget.RoktEnvironment : Swift.RawRepresentable {}
extension Rokt_Widget.RoktEventType : Swift.Equatable {}
extension Rokt_Widget.RoktEventType : Swift.Hashable {}
extension Rokt_Widget.RoktEventType : Swift.RawRepresentable {}
extension Rokt_Widget.RoktFrameworkType : Swift.Equatable {}
extension Rokt_Widget.RoktFrameworkType : Swift.Hashable {}
extension Rokt_Widget.RoktFrameworkType : Swift.RawRepresentable {}
